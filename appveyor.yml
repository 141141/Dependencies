# branches to build
branches:
  # whitelist
  only:
    - master

# Operating system (build VM template)
os:
  - Visual Studio 2017
  #- Visual Studio 2015
  #- Visual Studio 2013


configuration:
  - Release
  - Debug

platform:
  - x86
  - x64
  - Any CPU

artifacts:

  # old style packaging
  - path: output/Dependencies.zip
    name: Dependencies

  # "centennial" style packaging
  - path: "bin/**/*.appx"
  - path: "DependenciesAppx/DependenciesAppx_TemporaryKey.cer"

deploy:
  # Deploy to GitHub Releases
  - provider: GitHub
    artifact: Dependencies
    draft: false
    prerelease: false
    on:
      branch: master                # release from master branch only
      platform: Any CPU
      appveyor_repo_tag: true       # deploy on tag push only


build:
  project: C:/projects/dependencies/Dependencies.sln

environment:
  certsecret:
    secure: 1id6kDyNieDfYWTAnoJ/hA==

before_build:
  - ps: |
      if ( $($env:platform) -eq "Any CPU") {
        # extracting signing cert
        &nuget install secure-file -ExcludeVersion;
        &secure-file/tools/secure-file -decrypt "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx.enc" -secret "$($env:certsecret)" -out "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx";
      }

after_test:
 - ps: |
      if ( $($env:platform) -eq "Any CPU") {
        # remove decoded cert as soon as it is not useful anymore
        Remove-Item -Force "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx"
      }

test_script: # should be on_finish, but it need to be executed before artifacts is
  - ps: |
      if ( $($env:platform) -eq "Any CPU") {

        # Download external dependencies like peview
        Push-Location;
        $PEVIEW_BIN="";
        New-Item -ItemType Directory -Force -Path "tmp";
        cd tmp;
        wget https://github.com/processhacker2/processhacker2/releases/download/v2.39/processhacker-2.39-bin.zip -OutFile processhacker-2.39-bin.zip;
        $PhArchiveHash = (Get-FileHash -Algorithm SHA256 -Path ./processhacker-2.39-bin.zip).Hash;
        if ($PhArchiveHash -eq "2afb5303e191dde688c5626c3ee545e32e52f09da3b35b20f5e0d29a418432f5") {
          &7z.exe x ./processhacker-2.39-bin.zip x64/peview.exe
          $PEVIEW_BIN = (Resolve-Path ./x64/peview.exe).Path;
        }
        Pop-Location;

        # Creating output directory
        New-Item -ItemType Directory -Force -Path "output";
        cd output;

        $BINPATH="C:/projects/dependencies/bin/$($env:CONFIGURATION)AnyCPU";

        # Test if the binary (and the underlying lib) actually works
        &"$BINPATH/ClrPhTester.exe" -knowndll
        &"$BINPATH/ClrPhTester.exe" -apisets
        &"$BINPATH/ClrPhTester.exe" -manifest "$($env:windir)/System32/shell32.dll" 
        &"$BINPATH/ClrPhTester.exe" -sxsentries "$($env:windir)/System32/ctfmon.exe" 

        # Zipping everything
        &7z.exe a Dependencies.zip $BINPATH/*.dll $BINPATH/*.exe $BINPATH/*.config $BINPATH/*.pdb $PEVIEW_BIN;

        $makeappx = "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\makeappx.exe";
        $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe";

        # Copy assets to build folder
        Copy-Item "C:/projects/dependencies/DependenciesAppx/Assets" -Destination "C:/projects/dependencies/bin/$($env:CONFIGURATION)x64" -Force -Recurse

        # Create appx package
        & $makeappx pack /d "C:/projects/dependencies/bin/$($env:CONFIGURATION)x64" /l /p "C:/projects/dependencies/bin/DependenciesAppx_$($env:CONFIGURATION)x64.appx"

        # Sign appx package
        & $signtool sign /fd SHA256 /a /f "C:/projects/dependencies/DependenciesAppx/DependenciesAppx_TemporaryKey.pfx" "C:/projects/dependencies/bin/DependenciesAppx_$($env:CONFIGURATION)x64.appx"

      }
  - ps: Write-Host "Building artifact done"